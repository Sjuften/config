#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"
branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

warning="Did you remember to check branch size, format, sort and use modernize: y/n "
protected_branch="master"
origin="origin"
alert="You are pushing to the remote: $remote on branch: $branch, are you sure? y/n: "

master_alert="You are about to push to master, are you sure? (Check JENKINS) y/n"

if [ $remote = $origin ]
    then
        read -p "$warning" answer < /dev/tty
        if [ $answer == "y" ]
        then
            exit 0
        else
            exit 1
        fi
    fi
elif [ $branch = $protected_branch ]
    then
        read -p "$master_alert" answer < /dev/tty
        if [ $answer == "y" ]
        then
            exit 0
        else
            exit 1
        fi
    fi
else
        read -p "$alert" answer < /dev/tty
        if [ $answer == "y" ]
        then
            exit 0
        else
            exit 1
        fi
fi
